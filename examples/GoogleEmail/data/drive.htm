<!DOCTYPE html>
<html>
  
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=Edge">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<title>ESP Google Drive demo page</title>
	<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css" crossorigin="anonymous">
	<link rel="stylesheet" type="text/css" href="https://www.chartjs.org/samples/latest/style.css">
	<script src="https://www.chartjs.org/dist/2.9.3/Chart.min.js"></script>
	<style>
	  .dataBox {
      border: 1px solid gray;
      height: auto;
      padding: 0 1em;
      display: block;
      margin: 1em;
    }
    
    #dataFrame {
      height: 300px;
      overflow: scroll;
    }
	</style>
</head>
	
<body>
  <div class="container">
  <br><h1>ESP Google Drive demo page</h1>

  <div class="content">
  	<div class="wrapper"><canvas id="chart-0"></canvas></div>
  </div>
  
  <div>
   	<button type="button" id="getTokenButton" class="btn btn-primary btn-lg btn-block" onclick="sendUploadRequest()">Upload to Google Drive</button>
    <br>
  	<span id="uploadData" class="dataBox"> - </span><br>
  </div>
  
  <div id="dataFrame" class="dataBox" contenteditable>
  </div>


  <script>
    chartColors = {
    	red: 'rgb(255, 99, 132)',
    	orange: 'rgb(255, 159, 64)',
    	yellow: 'rgb(255, 205, 86)',
    	green: 'rgb(75, 192, 192)',
    	blue: 'rgb(54, 162, 235)',
    	purple: 'rgb(153, 102, 255)',
    	grey: 'rgb(201, 203, 207)'
    };

  	var DATA_COUNT = 10;
  	var labelsArray = [];
  	var temperature = [];
  	var pressure = [];
  	
  	
  	var data = {
  		labels: labelsArray,
  		datasets: [
  		  {
  		    label: "Temperature",
  		    yAxisID: 'A',
  				borderColor: chartColors.red,
  			  data: temperature,
  			  fill: false,
  		  },
  		  {
  		    label: "Pressure",
  		    borderColor: chartColors.blue,
  		    yAxisID: 'B',
  		    data: pressure,
  		    fill: false,
  		  }]
  	};
  
  	var options = {
  	  legend : false,
  		scales: {
        yAxes: [{
          id: 'A',
          type: 'linear',
          position: 'left',
          scaleLabel: {
  					display: true,
  					labelString: 'Temperature'
  				},
           ticks: {
            suggestedMax: 30,
            suggestedMin: 20,
            stepSize: 1
          }
        },
        
        {
          id: 'B',
          type: 'linear',
          position: 'right', 
          gridLines: {
            drawOnChartArea: false, // only want the grid lines for one axis to show up
          },
          scaleLabel: {
  					display: true,
  					labelString: 'Pressure'
  				},
          ticks: {
            suggestedMax: 1015,
            suggestedMin: 995
          }
        }]
      }
      
  	};
  
  	var chart = new Chart('chart-0', {
  		type: 'line',
  		data: data,
  		options: options
  	});
  

    
    function sendUploadRequest() {
      document.getElementById("uploadData").innerHTML = "";
      fetch('/sendToDrive')
      .then(response => response.text())
      .then(data => {
        console.log(data);
        let today = new Date().toLocaleString();
        document.getElementById("uploadData").innerHTML = data + '  -  (' + today + ')';
      });
    }
    
    setInterval(function() {
      // Call a function repetatively with 2 Second interval
      sendDataRequest();
    }, 60000); //5000mSeconds update rate
    
    
    function updateGraph(allText){
      try {
        var str = allText;
        str = str.split("\n").join("<br>");
        str = str.split(";").join("&emsp;");
        document.getElementById("dataFrame").innerHTML = str;
        updateScroll();
        
        var tempArray = allText.split("\n");
        var dataArray = [];
        for (var i = 0; i < tempArray.length-1; i++) {
            dataArray[i]= tempArray[i].split(';');
        }
        
        for (var i = 0; i < dataArray.length; i++) {
            labelsArray[i]= dataArray[i][0];
            temperature[i]= parseFloat(dataArray[i][1]);
            pressure[i]= parseFloat(dataArray[i][2]);
        }
        
        DATA_COUNT = dataArray.length;
        chart.update();
      }
      catch(err) {
        alert("Error parsing data received!");
      }
    }
    
    
    function sendDataRequest() {
      fetch('/getData')
      .then(response => response.text())
      .then(data => {
        //console.log(data);
        updateGraph(data);
      });
    }
    
    // First request
    sendDataRequest();
    
    // Update scroolbox to bottom on new data
    function updateScroll(){
      var element = document.getElementById("dataFrame");
      element.scrollTop = element.scrollHeight;
    }
  </script>
  </div>

</body>
</html>